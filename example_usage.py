#!/usr/bin/env python3
"""
Exemple d'utilisation du syst√®me LogementBlockchain
D√©montre les fonctionnalit√©s PoW et PoA - Generated By Claude AI
"""

from blockchain import *
from crypto import *
import time


def demo_pow_blockchain():
   """D√©monstration avec Proof of Work."""
   print("="*60)
   print("D√âMONSTRATION PROOF OF WORK")
   print("="*60)
   
   # Cr√©er blockchain PoW
   blockchain = LogementBlockchain(difficulty=2, consensus_type='pow')
   print(f"Blockchain PoW cr√©√©e avec difficult√© {blockchain.difficulty}")
   
   # Ajouter des transactions de logement
   transactions = [
      {
         "from": "Alice",
         "to": "Bob",
         "logement_id": "LOG001",
         "action": "transfer_ownership",
         "property_type": "apartment",
         "address": "123 Rue de la Paix, Paris",
         "price": 350000,
         "status": "validated"
      },
      {
         "from": "Bob", 
         "to": "Charlie",
         "logement_id": "LOG002",
         "action": "rental_agreement",
         "property_type": "house",
         "address": "456 Avenue des Champs, Lyon",
         "monthly_rent": 1200,
         "status": "validated"
      },
      {
         "from": "Charlie",
         "to": "David",
         "logement_id": "LOG003",
         "action": "transfer_ownership",
         "property_type": "studio",
         "address": "789 Boulevard Voltaire, Marseille",
         "price": 180000,
         "status": "pending"
      }
   ]
   
   # Ajouter et miner les transactions
   for i, tx in enumerate(transactions):
      print(f"\nAjout transaction {i+1}: {tx['logement_id']}")
      blockchain.add_new_transaction(tx)
      
      print("Mining en cours...")
      start_time = time.time()
      block_index = blockchain.mine()
      mining_time = time.time() - start_time
      
      if block_index:
         print(f"‚úì Bloc {block_index} min√© en {mining_time:.2f}s")
      else:
         print("‚úó √âchec du mining")
   
   # Afficher les statistiques
   stats = blockchain.get_chain_stats()
   print(f"\nüìä Statistiques de la blockchain:")
   for key, value in stats.items():
      print(f"  {key}: {value}")
   
   # Afficher les logements valid√©s
   validated = blockchain.get_validated_logements()
   print(f"\nüè† Logements valid√©s ({len(validated)}):")
   for item in validated:
      tx = item['transaction']
      print(f"  ‚Ä¢ {tx['logement_id']}: {tx['from']} ‚Üí {tx['to']} ({tx['action']})")
   
   return blockchain


def demo_poa_blockchain():
   """D√©monstration avec Proof of Authority."""
   print("\n" + "="*60)
   print("D√âMONSTRATION PROOF OF AUTHORITY")
   print("="*60)
   
   # Cr√©er blockchain PoA
   blockchain = LogementBlockchain(consensus_type='poa')
   sig_manager = SignatureManager()
   key_manager = KeyManager()
   
   # G√©n√©rer des cl√©s pour les validateurs
   print("G√©n√©ration des cl√©s des validateurs...")
   validator1_private, validator1_public, validator1_id = key_manager.generate_key_pair()
   validator2_private, validator2_public, validator2_id = key_manager.generate_key_pair()
   validator3_private, validator3_public, validator3_id = key_manager.generate_key_pair()
   
   # Ajouter les validateurs autoris√©s
   blockchain.add_validator(validator1_public)
   blockchain.add_validator(validator2_public)
   # validator3 ne sera pas autoris√©
   
   print(f"‚úì {len(blockchain.get_validators())} validateurs autoris√©s")
   
   # Transactions immobili√®res
   transactions = [
      {
         "from": "Notaire_Paris",
         "to": "Client_A",
         "logement_id": "NOTARIAL_001",
         "action": "property_registration",
         "property_type": "villa",
         "address": "12 Rue du Ch√¢teau, Versailles",
         "cadastral_ref": "AB123456",
         "price": 850000,
         "status": "validated"
      },
      {
         "from": "Agency_Lyon", 
         "to": "Client_B",
         "logement_id": "AGENCY_002",
         "action": "rental_contract",
         "property_type": "apartment",
         "address": "34 Place Bellecour, Lyon",
         "monthly_rent": 1800,
         "deposit": 3600,
         "duration_months": 12,
         "status": "validated"
      }
   ]
   
   # Miner avec diff√©rents validateurs
   validators = [
      ("Validateur 1", validator1_private, validator1_id),
      ("Validateur 2", validator2_private, validator2_id)
   ]
   
   for i, tx in enumerate(transactions):
      validator_name, validator_key, validator_id = validators[i % len(validators)]
      
      print(f"\nTransaction {i+1}: {tx['logement_id']}")
      blockchain.add_new_transaction(tx)
      
      print(f"Validation par {validator_name}...")
      start_time = time.time()
      block_index = blockchain.mine(private_key_pem=validator_key)
      validation_time = time.time() - start_time
      
      if block_index:
         print(f"‚úì Bloc {block_index} valid√© en {validation_time:.3f}s")
      else:
         print("‚úó √âchec de la validation")
   
   # Test avec validateur non autoris√©
   print(f"\nTest avec validateur non autoris√©...")
   blockchain.add_new_transaction({
      "from": "Hacker",
      "to": "Victim", 
      "logement_id": "FRAUD_001",
      "action": "illegal_transfer"
   })
   
   block_index = blockchain.mine(private_key_pem=validator3_private)
   if block_index is None:
      print("‚úì Transaction rejet√©e (validateur non autoris√©)")
   else:
      print("‚úó ERREUR: Transaction accept√©e!")
   
   # Afficher les statistiques
   stats = blockchain.get_chain_stats()
   print(f"\nüìä Statistiques PoA:")
   for key, value in stats.items():
      print(f"  {key}: {value}")
   
   return blockchain


def demo_transaction_queries(blockchain):
   """D√©monstration des requ√™tes sur les transactions."""
   print("\n" + "="*60)
   print("D√âMONSTRATION DES REQU√äTES")
   print("="*60)
   
   # Rechercher par adresse
   print("Transactions impliquant 'Bob':")
   bob_transactions = blockchain.get_transactions_by_address("Bob")
   for item in bob_transactions:
      tx = item['transaction']
      print(f"  ‚Ä¢ Bloc {item['block_index']}: {tx.get('logement_id', 'N/A')} - {tx.get('action', 'N/A')}")
   
   # Logements valid√©s
   validated = blockchain.get_validated_logements()
   print(f"\nLogements avec statut 'validated' ({len(validated)}):")
   for item in validated:
      tx = item['transaction']
      block_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(item['block_timestamp']))
      print(f"  ‚Ä¢ {tx['logement_id']}: valid√© le {block_time}")


def demo_chain_persistence():
   """D√©monstration de la persistance."""
   print("\n" + "="*60)
   print("D√âMONSTRATION PERSISTANCE")
   print("="*60)
   
   # Cr√©er une blockchain avec des donn√©es
   original_blockchain = LogementBlockchain(difficulty=1, consensus_type='pow')
   
   transactions = [
      {"from": "User1", "to": "User2", "logement_id": "SAVE_001", "status": "validated"},
      {"from": "User2", "to": "User3", "logement_id": "SAVE_002", "status": "validated"}
   ]
   
   for tx in transactions:
      original_blockchain.add_new_transaction(tx)
      original_blockchain.mine()
   
   # Exporter
   filename = "blockchain_backup.json"
   original_blockchain.export_chain(filename)
   print(f"‚úì Blockchain export√©e vers {filename}")
   
   # Importer
   imported_blockchain = LogementBlockchain.import_chain(filename, difficulty=1, consensus_type='pow')
   print(f"‚úì Blockchain import√©e depuis {filename}")
   
   # V√©rifier
   original_stats = original_blockchain.get_chain_stats()
   imported_stats = imported_blockchain.get_chain_stats()
   
   print("Comparaison:")
   print(f"  Blocs originaux: {original_stats['total_blocks']}")
   print(f"  Blocs import√©s: {imported_stats['total_blocks']}")
   print(f"  Transactions originales: {original_stats['total_transactions']}")
   print(f"  Transactions import√©es: {imported_stats['total_transactions']}")
   
   # Nettoyer
   import os
   if os.path.exists(filename):
      os.remove(filename)
      print(f"‚úì Fichier {filename} supprim√©")


def main():
   """Fonction principale de d√©monstration."""
   print("üè† SYST√àME BLOCKCHAIN POUR LOGEMENTS")
   print("D√©monstration des fonctionnalit√©s PoW et PoA")
   
   # D√©monstrations
   pow_blockchain = demo_pow_blockchain()
   poa_blockchain = demo_poa_blockchain()
   
   # Requ√™tes sur la blockchain PoW
   demo_transaction_queries(pow_blockchain)
   
   # Persistance
   demo_chain_persistence()
   
   print("\n" + "="*60)
   print("D√âMONSTRATION TERMIN√âE")
   print("="*60)
   print("‚úì Blockchain PoW: Mining bas√© sur la difficult√©")
   print("‚úì Blockchain PoA: Validation par autorit√©s certifi√©es")
   print("‚úì Transactions de logement s√©curis√©es")
   print("‚úì Requ√™tes et statistiques")
   print("‚úì Import/Export de donn√©es")


if __name__ == '__main__':
   main()